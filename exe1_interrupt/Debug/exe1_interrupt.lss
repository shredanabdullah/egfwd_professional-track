
exe1_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000390  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006ba  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <interrupt_init>:

#include <avr/io.h>
#include <avr/interrupt.h>


void interrupt_init(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRD &=~(1<<2);
  74:	a1 e3       	ldi	r26, 0x31	; 49
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e1 e3       	ldi	r30, 0x31	; 49
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8b 7f       	andi	r24, 0xFB	; 251
  80:	8c 93       	st	X, r24
	SREG |=(1<<7);
  82:	af e5       	ldi	r26, 0x5F	; 95
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ef e5       	ldi	r30, 0x5F	; 95
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	8c 93       	st	X, r24
	MCUCR |=(1<<ISC01) | (1<<ISC00);
  90:	a5 e5       	ldi	r26, 0x55	; 85
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e5 e5       	ldi	r30, 0x55	; 85
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	83 60       	ori	r24, 0x03	; 3
  9c:	8c 93       	st	X, r24
	GICR |=(1<<6);
  9e:	ab e5       	ldi	r26, 0x5B	; 91
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	eb e5       	ldi	r30, 0x5B	; 91
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	8c 93       	st	X, r24
}
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <__vector_1>:

ISR(INT0_vect){
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	PORTC ^=(1<<0);
  d0:	a5 e3       	ldi	r26, 0x35	; 53
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	89 27       	eor	r24, r25
  de:	8c 93       	st	X, r24
}
  e0:	cf 91       	pop	r28
  e2:	df 91       	pop	r29
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	bf 91       	pop	r27
  ea:	af 91       	pop	r26
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <main>:
int main(void){
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	DDRC |=(1<<0);
 102:	a4 e3       	ldi	r26, 0x34	; 52
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e4 e3       	ldi	r30, 0x34	; 52
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	8c 93       	st	X, r24
	PORTC &=~(1<<0);
 110:	a5 e3       	ldi	r26, 0x35	; 53
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e5 e3       	ldi	r30, 0x35	; 53
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	8c 93       	st	X, r24

	interrupt_init();
 11e:	0e 94 36 00 	call	0x6c	; 0x6c <interrupt_init>
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x28>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>

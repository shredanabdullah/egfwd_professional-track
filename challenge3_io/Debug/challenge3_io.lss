
challenge3_io.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001be  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000003f0  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006c8  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 */

#include<avr/io.h>


int main(void){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	//INIT TWO BUTTONS
	DDRD &=~(1<<2)&~(1<<3);
  96:	a1 e3       	ldi	r26, 0x31	; 49
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e1 e3       	ldi	r30, 0x31	; 49
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	83 7f       	andi	r24, 0xF3	; 243
  a2:	8c 93       	st	X, r24
	PORTD |= (1<<2)|(1<<3);
  a4:	a2 e3       	ldi	r26, 0x32	; 50
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e2 e3       	ldi	r30, 0x32	; 50
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8c 60       	ori	r24, 0x0C	; 12
  b0:	8c 93       	st	X, r24
	//INIT PIN FOR COMMON CATHODE
	DDRC |=(1<<6);
  b2:	a4 e3       	ldi	r26, 0x34	; 52
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e4 e3       	ldi	r30, 0x34	; 52
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	8c 93       	st	X, r24
	PORTC |=(1<<6);
  c0:	a5 e3       	ldi	r26, 0x35	; 53
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e5 e3       	ldi	r30, 0x35	; 53
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	8c 93       	st	X, r24
	//INIT 7 SEGMENTS LEDS
	DDRA|= (1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6)|(1<<7);
  ce:	aa e3       	ldi	r26, 0x3A	; 58
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8e 6f       	ori	r24, 0xFE	; 254
  da:	8c 93       	st	X, r24
	PORTA =0b01111110;
  dc:	eb e3       	ldi	r30, 0x3B	; 59
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8e e7       	ldi	r24, 0x7E	; 126
  e2:	80 83       	st	Z, r24

	unsigned char count=0;
  e4:	19 82       	std	Y+1, r1	; 0x01
	unsigned char arr[10]={0b01111110,0b00001100,0b10110110,0b10011110,0b11001100,0b11011010,0b11111000,0b00001110,0b11111110,0b11001110};
  e6:	ce 01       	movw	r24, r28
  e8:	02 96       	adiw	r24, 0x02	; 2
  ea:	9d 87       	std	Y+13, r25	; 0x0d
  ec:	8c 87       	std	Y+12, r24	; 0x0c
  ee:	e0 e6       	ldi	r30, 0x60	; 96
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ff 87       	std	Y+15, r31	; 0x0f
  f4:	ee 87       	std	Y+14, r30	; 0x0e
  f6:	fa e0       	ldi	r31, 0x0A	; 10
  f8:	f8 8b       	std	Y+16, r31	; 0x10
  fa:	ee 85       	ldd	r30, Y+14	; 0x0e
  fc:	ff 85       	ldd	r31, Y+15	; 0x0f
  fe:	00 80       	ld	r0, Z
 100:	8e 85       	ldd	r24, Y+14	; 0x0e
 102:	9f 85       	ldd	r25, Y+15	; 0x0f
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	9f 87       	std	Y+15, r25	; 0x0f
 108:	8e 87       	std	Y+14, r24	; 0x0e
 10a:	ec 85       	ldd	r30, Y+12	; 0x0c
 10c:	fd 85       	ldd	r31, Y+13	; 0x0d
 10e:	00 82       	st	Z, r0
 110:	8c 85       	ldd	r24, Y+12	; 0x0c
 112:	9d 85       	ldd	r25, Y+13	; 0x0d
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	9d 87       	std	Y+13, r25	; 0x0d
 118:	8c 87       	std	Y+12, r24	; 0x0c
 11a:	98 89       	ldd	r25, Y+16	; 0x10
 11c:	91 50       	subi	r25, 0x01	; 1
 11e:	98 8b       	std	Y+16, r25	; 0x10
 120:	e8 89       	ldd	r30, Y+16	; 0x10
 122:	ee 23       	and	r30, r30
 124:	51 f7       	brne	.-44     	; 0xfa <main+0x78>

	while(1){
		if(!(PIND&(1<<2))){
 126:	e0 e3       	ldi	r30, 0x30	; 48
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 2f       	mov	r24, r24
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	84 70       	andi	r24, 0x04	; 4
 132:	90 70       	andi	r25, 0x00	; 0
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	e1 f4       	brne	.+56     	; 0x170 <main+0xee>
				if(count<9){
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	89 30       	cpi	r24, 0x09	; 9
 13c:	78 f4       	brcc	.+30     	; 0x15c <main+0xda>
				count++;
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	89 83       	std	Y+1, r24	; 0x01
				PORTA = arr[count];
 144:	ab e3       	ldi	r26, 0x3B	; 59
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	ce 01       	movw	r24, r28
 150:	02 96       	adiw	r24, 0x02	; 2
 152:	fc 01       	movw	r30, r24
 154:	e2 0f       	add	r30, r18
 156:	f3 1f       	adc	r31, r19
 158:	80 81       	ld	r24, Z
 15a:	8c 93       	st	X, r24
			    }
			while( !(PIND & (1<<PD2)) ){} // wait until switch is released
 15c:	e0 e3       	ldi	r30, 0x30	; 48
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	84 70       	andi	r24, 0x04	; 4
 168:	90 70       	andi	r25, 0x00	; 0
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	b9 f3       	breq	.-18     	; 0x15c <main+0xda>
 16e:	db cf       	rjmp	.-74     	; 0x126 <main+0xa4>
		}
		else if(!(PIND&(1<<3))){
 170:	e0 e3       	ldi	r30, 0x30	; 48
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	88 70       	andi	r24, 0x08	; 8
 17c:	90 70       	andi	r25, 0x00	; 0
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	91 f6       	brne	.-92     	; 0x126 <main+0xa4>
			if(count>0){
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	88 23       	and	r24, r24
 186:	79 f0       	breq	.+30     	; 0x1a6 <main+0x124>
			count--;
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	89 83       	std	Y+1, r24	; 0x01
			PORTA = arr[count];
 18e:	ab e3       	ldi	r26, 0x3B	; 59
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	ce 01       	movw	r24, r28
 19a:	02 96       	adiw	r24, 0x02	; 2
 19c:	fc 01       	movw	r30, r24
 19e:	e2 0f       	add	r30, r18
 1a0:	f3 1f       	adc	r31, r19
 1a2:	80 81       	ld	r24, Z
 1a4:	8c 93       	st	X, r24
		    }
		while( !(PIND & (1<<PD3)) ){} // wait until switch is released
 1a6:	e0 e3       	ldi	r30, 0x30	; 48
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	88 70       	andi	r24, 0x08	; 8
 1b2:	90 70       	andi	r25, 0x00	; 0
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	b9 f3       	breq	.-18     	; 0x1a6 <main+0x124>
 1b8:	b6 cf       	rjmp	.-148    	; 0x126 <main+0xa4>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>


exe3_io.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000039c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000682  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

/**controlling two leds using two push buttons*/

#include <avr/io.h>

int main(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	//init buttons
	DDRB &= ~(1<<0)&~(1<<1);//pull down
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8c 7f       	andi	r24, 0xFC	; 252
  80:	8c 93       	st	X, r24
	//init leds
	DDRC |= (1<<0)|(1<<1);
  82:	a4 e3       	ldi	r26, 0x34	; 52
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8c 93       	st	X, r24
	PORTC |= (1<<0)|(1<<1);
  90:	a5 e3       	ldi	r26, 0x35	; 53
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e5 e3       	ldi	r30, 0x35	; 53
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	83 60       	ori	r24, 0x03	; 3
  9c:	8c 93       	st	X, r24
	//super loop
	while(1){
		if(PINB&(1<<0)){
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 2f       	mov	r24, r24
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	81 70       	andi	r24, 0x01	; 1
  aa:	90 70       	andi	r25, 0x00	; 0
  ac:	88 23       	and	r24, r24
  ae:	41 f0       	breq	.+16     	; 0xc0 <main+0x54>
			PORTC &=~(1<<0);
  b0:	a5 e3       	ldi	r26, 0x35	; 53
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e5 e3       	ldi	r30, 0x35	; 53
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	8c 93       	st	X, r24
  be:	10 c0       	rjmp	.+32     	; 0xe0 <main+0x74>
		}
		else if(!(PINB&(1<<0))){
  c0:	e6 e3       	ldi	r30, 0x36	; 54
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 2f       	mov	r24, r24
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	81 70       	andi	r24, 0x01	; 1
  cc:	90 70       	andi	r25, 0x00	; 0
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	39 f4       	brne	.+14     	; 0xe0 <main+0x74>
			PORTC |=(1<<0);
  d2:	a5 e3       	ldi	r26, 0x35	; 53
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e5 e3       	ldi	r30, 0x35	; 53
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8c 93       	st	X, r24
		}
		if(PINB&(1<<1)){
  e0:	e6 e3       	ldi	r30, 0x36	; 54
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	82 70       	andi	r24, 0x02	; 2
  ec:	90 70       	andi	r25, 0x00	; 0
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	41 f0       	breq	.+16     	; 0x102 <main+0x96>
			PORTC &=~(1<<1);
  f2:	a5 e3       	ldi	r26, 0x35	; 53
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e5 e3       	ldi	r30, 0x35	; 53
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	8c 93       	st	X, r24
 100:	10 c0       	rjmp	.+32     	; 0x122 <main+0xb6>
		}
		else if(!(PINB&(1<<1))){
 102:	e6 e3       	ldi	r30, 0x36	; 54
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 2f       	mov	r24, r24
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	82 70       	andi	r24, 0x02	; 2
 10e:	90 70       	andi	r25, 0x00	; 0
 110:	00 97       	sbiw	r24, 0x00	; 0
 112:	39 f4       	brne	.+14     	; 0x122 <main+0xb6>
			PORTC |=(1<<1);
 114:	a5 e3       	ldi	r26, 0x35	; 53
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	e5 e3       	ldi	r30, 0x35	; 53
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	8c 93       	st	X, r24
		}
		if((PINB&(1<<0)) && (PINB&(1<<1))){
 122:	e6 e3       	ldi	r30, 0x36	; 54
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 2f       	mov	r24, r24
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	90 70       	andi	r25, 0x00	; 0
 130:	98 2f       	mov	r25, r24
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	89 27       	eor	r24, r25
 136:	88 23       	and	r24, r24
 138:	89 f4       	brne	.+34     	; 0x15c <main+0xf0>
 13a:	e6 e3       	ldi	r30, 0x36	; 54
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	82 70       	andi	r24, 0x02	; 2
 146:	90 70       	andi	r25, 0x00	; 0
 148:	00 97       	sbiw	r24, 0x00	; 0
 14a:	41 f0       	breq	.+16     	; 0x15c <main+0xf0>
			PORTC &= ~(1<<0)&~(1<<1);
 14c:	a5 e3       	ldi	r26, 0x35	; 53
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e5 e3       	ldi	r30, 0x35	; 53
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	8c 7f       	andi	r24, 0xFC	; 252
 158:	8c 93       	st	X, r24
 15a:	a1 cf       	rjmp	.-190    	; 0x9e <main+0x32>
		}
		else if(! ( (PINB& (1<<0) ) && ( PINB& (1<<1) ) ) ){
 15c:	e6 e3       	ldi	r30, 0x36	; 54
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	81 70       	andi	r24, 0x01	; 1
 168:	90 70       	andi	r25, 0x00	; 0
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	51 f0       	breq	.+20     	; 0x182 <main+0x116>
 16e:	e6 e3       	ldi	r30, 0x36	; 54
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	82 70       	andi	r24, 0x02	; 2
 17a:	90 70       	andi	r25, 0x00	; 0
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	09 f0       	breq	.+2      	; 0x182 <main+0x116>
 180:	8e cf       	rjmp	.-228    	; 0x9e <main+0x32>
			PORTC |= (1<<0)|(1<<1);
 182:	a5 e3       	ldi	r26, 0x35	; 53
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e5 e3       	ldi	r30, 0x35	; 53
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	83 60       	ori	r24, 0x03	; 3
 18e:	8c 93       	st	X, r24
 190:	86 cf       	rjmp	.-244    	; 0x9e <main+0x32>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>

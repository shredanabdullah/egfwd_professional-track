
exe6_io.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003cc  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006a0  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000UL
#include<avr/io.h>
#include "util/delay.h"


int main(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1<<PD4);
  76:	a1 e3       	ldi	r26, 0x31	; 49
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e1 e3       	ldi	r30, 0x31	; 49
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	8f 7e       	andi	r24, 0xEF	; 239
  82:	8c 93       	st	X, r24

	DDRC |=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3);
  84:	a4 e3       	ldi	r26, 0x34	; 52
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e4 e3       	ldi	r30, 0x34	; 52
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 60       	ori	r24, 0x0F	; 15
  90:	8c 93       	st	X, r24
	PORTC &=~(1<<PC0)&~(1<<PC1)&~(1<<PC2)&~(1<<PC3);
  92:	a5 e3       	ldi	r26, 0x35	; 53
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e5 e3       	ldi	r30, 0x35	; 53
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	8c 93       	st	X, r24

	unsigned char isPressed=0;
  a0:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char count=0;
  a2:	19 82       	std	Y+1, r1	; 0x01

	while(1){
		if(PIND&(1<<PD4)){
  a4:	e0 e3       	ldi	r30, 0x30	; 48
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	88 2f       	mov	r24, r24
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	80 71       	andi	r24, 0x10	; 16
  b0:	90 70       	andi	r25, 0x00	; 0
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	19 f1       	breq	.+70     	; 0xfc <main+0x90>
			//_delay_ms(30);
			if(PIND&(1<<PD4)){
  b6:	e0 e3       	ldi	r30, 0x30	; 48
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	80 71       	andi	r24, 0x10	; 16
  c2:	90 70       	andi	r25, 0x00	; 0
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	71 f3       	breq	.-36     	; 0xa4 <main+0x38>
				if(isPressed==0){
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	88 23       	and	r24, r24
  cc:	59 f7       	brne	.-42     	; 0xa4 <main+0x38>
					isPressed=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	8a 83       	std	Y+2, r24	; 0x02
					count++;
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	89 83       	std	Y+1, r24	; 0x01
					if(count<10){
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	8a 30       	cpi	r24, 0x0A	; 10
  dc:	30 f4       	brcc	.+12     	; 0xea <main+0x7e>
						PORTC++;
  de:	e5 e3       	ldi	r30, 0x35	; 53
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 83       	st	Z, r24
  e8:	dd cf       	rjmp	.-70     	; 0xa4 <main+0x38>
					}
					else{
						PORTC &=~(1<<PC0)&~(1<<PC1)&~(1<<PC2)&~(1<<PC3);
  ea:	a5 e3       	ldi	r26, 0x35	; 53
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e5 e3       	ldi	r30, 0x35	; 53
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	8c 93       	st	X, r24
						count=0;
  f8:	19 82       	std	Y+1, r1	; 0x01
  fa:	d4 cf       	rjmp	.-88     	; 0xa4 <main+0x38>
					}
		       }
			}
	   }else isPressed=0;
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	d2 cf       	rjmp	.-92     	; 0xa4 <main+0x38>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
